name: Release

on:
  push:
    tags:
      - 'v*'  # 当推送 v1.0.0, v2.1.0 等格式的 tag 时触发

jobs:
  build-frontend:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: web/package-lock.json

    - name: Install frontend dependencies
      run: |
        cd web
        npm ci

    - name: Build frontend
      run: |
        cd web
        npm run build

    - name: Upload frontend build
      uses: actions/upload-artifact@v4
      with:
        name: frontend-dist
        path: web/dist/

  build-binaries:
    needs: [build-frontend]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            suffix: linux-amd64
            runner: ubuntu-latest
          - goos: linux
            goarch: arm64
            suffix: linux-arm64
            runner: ubuntu-latest
          - goos: windows
            goarch: amd64
            suffix: windows-amd64.exe
            runner: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Download frontend build
      uses: actions/download-artifact@v4
      with:
        name: frontend-dist
        path: web/dist/

    - name: Verify frontend files
      run: |
        ls -la web/dist/
        echo "Frontend files downloaded successfully"

    - name: Install cross-compilation dependencies
      run: |
        sudo apt-get update
        if [ "${{ matrix.goos }}" = "linux" ] && [ "${{ matrix.goarch }}" = "arm64" ]; then
          sudo apt-get install -y gcc-aarch64-linux-gnu
        elif [ "${{ matrix.goos }}" = "windows" ]; then
          sudo apt-get install -y gcc-mingw-w64
        fi

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 1
      run: |
        if [ "${{ matrix.goos }}" = "linux" ] && [ "${{ matrix.goarch }}" = "amd64" ]; then
          # Linux AMD64 - native compilation
          go build -ldflags="-s -w" -o crontab-go-${{ matrix.suffix }} ./cmd
        elif [ "${{ matrix.goos }}" = "linux" ] && [ "${{ matrix.goarch }}" = "arm64" ]; then
          # Linux ARM64 - cross compilation
          CC=aarch64-linux-gnu-gcc go build -ldflags="-s -w" -o crontab-go-${{ matrix.suffix }} ./cmd
        elif [ "${{ matrix.goos }}" = "windows" ] && [ "${{ matrix.goarch }}" = "amd64" ]; then
          # Windows AMD64 - cross compilation
          CC=x86_64-w64-mingw32-gcc go build -ldflags="-s -w" -o crontab-go-${{ matrix.suffix }} ./cmd
        fi

    - name: Create release package
      run: |
        mkdir -p release-package
        cp crontab-go-${{ matrix.suffix }} release-package/
        cp -r web/dist release-package/web/
        
        # 创建启动脚本
        if [ "${{ matrix.goos }}" = "windows" ]; then
          echo '@echo off' > release-package/start.bat
          echo 'crontab-go-${{ matrix.suffix }}' >> release-package/start.bat
        else
          echo '#!/bin/bash' > release-package/start.sh
          echo './crontab-go-${{ matrix.suffix }}' >> release-package/start.sh
          chmod +x release-package/start.sh
        fi
        
        # 创建压缩包
        if [ "${{ matrix.goos }}" = "windows" ]; then
          cd release-package && zip -r ../crontab-go-${{ matrix.suffix }}.zip . && cd ..
        else
          tar -czf crontab-go-${{ matrix.suffix }}.tar.gz -C release-package .
        fi

    - name: Upload binary package
      uses: actions/upload-artifact@v4
      with:
        name: crontab-go-${{ matrix.suffix }}-package
        path: |
          crontab-go-${{ matrix.suffix }}.tar.gz
          crontab-go-${{ matrix.suffix }}.zip


  upload-assets:
    needs: [build-binaries]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: read

    steps:
    - uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: crontab-go-*-package
        merge-multiple: true

    - name: List downloaded files
      run: |
        echo "Current directory structure:"
        ls -la
        echo "Looking for archives:"
        find . -name "*.tar.gz" -o -name "*.zip"
        echo "All files:"
        find . -type f

    - name: Create release and upload assets
      uses: softprops/action-gh-release@v1
      with:
        files: |
          *.tar.gz
          *.zip
        generate_release_notes: true
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ github.token }}}