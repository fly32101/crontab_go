name: Build and Release

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: web/package-lock.json

    - name: Install frontend dependencies
      run: |
        cd web
        npm ci

    - name: Build frontend
      run: |
        cd web
        npm run build

    - name: Run Go tests
      run: go test -v ./...

    - name: Run Go vet
      run: go vet ./...

  build-binaries:
    needs: test
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            suffix: linux-amd64
          - goos: linux
            goarch: arm64
            suffix: linux-arm64
          - goos: windows
            goarch: amd64
            suffix: windows-amd64.exe
          - goos: darwin
            goarch: amd64
            suffix: darwin-amd64
          - goos: darwin
            goarch: arm64
            suffix: darwin-arm64

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: web/package-lock.json

    - name: Install frontend dependencies
      run: |
        cd web
        npm ci

    - name: Build frontend
      run: |
        cd web
        npm run build

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 1
      run: |
        if [ "${{ matrix.goos }}" = "linux" ]; then
          # ‰∏∫ Linux ÂÆâË£Ö CGO ‰æùËµñ
          sudo apt-get update
          sudo apt-get install -y gcc-multilib
          if [ "${{ matrix.goarch }}" = "arm64" ]; then
            sudo apt-get install -y gcc-aarch64-linux-gnu
            export CC=aarch64-linux-gnu-gcc
          fi
        fi
        
        go build -ldflags="-s -w" -o crontab-go-${{ matrix.suffix }} ./cmd

    - name: Upload binary
      uses: actions/upload-artifact@v3
      with:
        name: crontab-go-${{ matrix.suffix }}
        path: crontab-go-${{ matrix.suffix }}

  build-docker:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  release:
    needs: [build-binaries, build-docker]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v3

    - name: Create release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          crontab-go-*/crontab-go-*
        body: |
          ## üöÄ Release Notes
          
          ### üì¶ Docker Images
          ```bash
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
          ```
          
          ### üì• Binary Downloads
          - **Linux AMD64**: `crontab-go-linux-amd64`
          - **Linux ARM64**: `crontab-go-linux-arm64`
          - **Windows AMD64**: `crontab-go-windows-amd64.exe`
          - **macOS AMD64**: `crontab-go-darwin-amd64`
          - **macOS ARM64**: `crontab-go-darwin-arm64`
          
          ### üê≥ Quick Start with Docker
          ```bash
          # ‰ΩøÁî® Docker Compose
          curl -O https://raw.githubusercontent.com/${{ github.repository }}/${{ github.ref_name }}/docker-compose.yml
          docker-compose up -d
          
          # ÊàñÁõ¥Êé•ËøêË°å
          docker run -d -p 8080:8080 -v $(pwd)/data:/app/data ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
          ```
          
          ### üìñ Documentation
          - [Installation Guide](https://github.com/${{ github.repository }}/blob/${{ github.ref_name }}/README.md)
          - [API Documentation](https://github.com/${{ github.repository }}/blob/${{ github.ref_name }}/docs/API.md)
          - [Notification Setup](https://github.com/${{ github.repository }}/blob/${{ github.ref_name }}/docs/NOTIFICATION.md)
          - [Task Templates](https://github.com/${{ github.repository }}/blob/${{ github.ref_name }}/docs/TASK_TEMPLATES.md)
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}