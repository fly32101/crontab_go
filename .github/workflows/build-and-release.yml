name: Build and Release

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]

# 移除了 Docker 相关的环境变量

jobs:
  build-binaries:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            suffix: linux-amd64
          - goos: linux
            goarch: arm64
            suffix: linux-arm64
          - goos: windows
            goarch: amd64
            suffix: windows-amd64.exe
          - goos: darwin
            goarch: amd64
            suffix: darwin-amd64
          - goos: darwin
            goarch: arm64
            suffix: darwin-arm64

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: web/package-lock.json

    - name: Install frontend dependencies
      run: |
        cd web
        npm ci

    - name: Build frontend
      run: |
        cd web
        npm run build

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 1
      run: |
        if [ "${{ matrix.goos }}" = "linux" ]; then
          # 为 Linux 安装 CGO 依赖
          sudo apt-get update
          sudo apt-get install -y gcc-multilib
          if [ "${{ matrix.goarch }}" = "arm64" ]; then
            sudo apt-get install -y gcc-aarch64-linux-gnu
            export CC=aarch64-linux-gnu-gcc
          fi
        fi
        
        go build -ldflags="-s -w" -o crontab-go-${{ matrix.suffix }} ./cmd

    - name: Upload binary
      uses: actions/upload-artifact@v3
      with:
        name: crontab-go-${{ matrix.suffix }}
        path: crontab-go-${{ matrix.suffix }}

  release:
    needs: [build-binaries]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v3

    - name: Create release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          crontab-go-*/crontab-go-*
        body: |
          ## 🚀 Release Notes
          
          ### 📥 Binary Downloads
          - **Linux AMD64**: `crontab-go-linux-amd64`
          - **Linux ARM64**: `crontab-go-linux-arm64`
          - **Windows AMD64**: `crontab-go-windows-amd64.exe`
          - **macOS AMD64**: `crontab-go-darwin-amd64`
          - **macOS ARM64**: `crontab-go-darwin-arm64`
          
          ### 🚀 Quick Start
          
          1. **下载对应平台的二进制文件**
          2. **给执行权限** (Linux/macOS):
             ```bash
             chmod +x crontab-go-*
             ```
          3. **运行应用**:
             ```bash
             ./crontab-go-linux-amd64  # Linux
             ./crontab-go-darwin-amd64 # macOS
             crontab-go-windows-amd64.exe # Windows
             ```
          4. **访问应用**: http://localhost:8080
          5. **默认账户**: admin/admin123
          
          ### 🐳 Docker 部署 (可选)
          如果你想使用 Docker，可以自行构建镜像：
          ```bash
          git clone https://github.com/${{ github.repository }}.git
          cd crontab_go
          docker build -t crontab-go:${{ github.ref_name }} .
          docker run -d -p 8080:8080 -v $(pwd)/data:/app/data crontab-go:${{ github.ref_name }}
          ```
          
          ### 📖 Documentation
          - [Installation Guide](https://github.com/${{ github.repository }}/blob/${{ github.ref_name }}/README.md)
          - [Docker Deployment](https://github.com/${{ github.repository }}/blob/${{ github.ref_name }}/docs/DOCKER.md)
          - [Notification Setup](https://github.com/${{ github.repository }}/blob/${{ github.ref_name }}/docs/NOTIFICATION.md)
          - [Task Templates](https://github.com/${{ github.repository }}/blob/${{ github.ref_name }}/docs/TASK_TEMPLATES.md)
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}